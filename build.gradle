plugins {
    id 'java-library'
    id 'idea'
    id 'fabric-loom' version '1.4-SNAPSHOT'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

version = mod_version
group = maven_group

import groovy.json.JsonSlurper

static def getSubprojectVersion(Project project) {
    return project.properties["$project.name-version"]
}

static def addPomMetadataInformation(Project project, MavenPom pom) {
    def modJsonFile = project.file('src/main/resources/fabric.mod.json')

    if (!modJsonFile.exists()) {
        return
    }

    def modJson = new JsonSlurper().parse(modJsonFile)

    pom.name = modJson.name
    pom.description = modJson.description
    pom.url = modJson.contact.homepage

    pom.inceptionYear = '2023'
    pom.licenses {
        license {
            name = modJson.license
            url = 'https://github.com/great-big-world/creo-api/blob/master/LICENSE'
        }
    }
    pom.developers {
        developer {
            id = 'creoii'
            name = 'creoii'
            url = 'https://creoii.dev/'
        }
    }
    pom.scm {
        connection = 'scm:git:https://github.com/great-big-world/creo-api.git'
        developerConnection = 'scm:git:https://github.com/great-big-world/creo-api.git'
        url = 'https://github.com/great-big-world/creo-api'
    }
    pom.issueManagement {
        system = 'GitHub'
        url = 'https://github.com/great-big-world/creo-api/issues'
    }
    pom.organization {
        name = 'Great Big World'
        url = 'https://github.com/great-big-world'
    }
}

allprojects {
    tasks.register("findLatestVersion") {
        doFirst {
            def groupId = project.group
            def artifactId = project.name

            def metadata = "https://repo.maven.apache.org/maven2/${groupId.replace('.', '/')}/$artifactId/maven-metadata.xml"
            def latestVersion = new XmlSlurper().parseText(new URL(metadata).text).versioning.latest.text()

            project.ext.latestVersion = latestVersion

            logger.lifecycle("Latest version for $groupId:$artifactId is $latestVersion")
        }
    }

    tasks.register("shouldPublish") {
        doFirst {
            dependsOn findLatestVersion

            if (project.version > project.ext.latestVersion) {
                logger.lifecycle("Publishing $project.name $project.version")
            } else {
                logger.lifecycle("Skipping publication for project: $project.name")
                throw new StopExecutionException("Publication skipped for $project.name")
            }
        }
    }

    tasks.withType(PublishToMavenRepository).configureEach {
        dependsOn findLatestVersion

        onlyIf {
            project.version > project.ext.latestVersion
        }
    }

    apply plugin: 'java-library'
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    configurations {
        dev {
            canBeResolved = false
            canBeConsumed = true
        }
    }

    signing {
        afterEvaluate {
            sign publishing.publications.mavenJava
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
        withSourcesJar()
        withJavadocJar()
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release.set(17)
        it.options.encoding = 'UTF-8'
    }

    dependencies {
        minecraft "com.mojang:minecraft:$minecraft_version"
        mappings "net.fabricmc:yarn:$yarn_mappings:v2"
        modImplementation "net.fabricmc:fabric-loader:$loader_version"
        modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_version"
    }

    Project sub = it
    tasks.withType(ProcessResources).configureEach {
        inputs.property "version", (sub.version + "+" + minecraft_version)
        inputs.property "loader_version", loader_version
        inputs.property "minecraft_version", minecraft_version

        filesMatching("fabric.mod.json") {
            expand "version": (sub.version + "+" + minecraft_version),
                    "loader_version": loader_version,
                    "minecraft_version": minecraft_version
        }
    }

    jar {
        destinationDirectory = file("$rootDir/build/libs/$minecraft_version/$mod_version")
    }

    remapJar {
        afterEvaluate {
            subprojects.each {
                nestedJars.from project("$it.path").tasks.getByName('remapJar')
            }
        }
        destinationDirectory = file("$rootDir/build/libs/$minecraft_version/$mod_version")
    }

    javadocJar {
        destinationDirectory = file("$rootDir/build/libs/$minecraft_version/$mod_version")
    }

    sourcesJar {
        destinationDirectory = file("$rootDir/build/libs/$minecraft_version/$mod_version")
    }

    artifacts {
        dev remapJar
        dev javadocJar
        dev sourcesJar
    }

    signing {
        sign remapJar
    }
}

subprojects {
    group = maven_group
    version = getSubprojectVersion(it)

    base {
        archivesName = project.name
    }

    apply plugin: 'java-library'
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    addPomMetadataInformation(project, pom)
                }

                artifact(remapJar) {
                    builtBy remapJar
                }

                artifact(remapSourcesJar) {
                    builtBy remapSourcesJar
                }

                artifact javadocJar
            }
        }
    }
}

dependencies {
    afterEvaluate {
        subprojects.each {
            if (it.name.startsWith("creo")) {
                dependencies.implementation project(path: ":$it.name", configuration: 'dev')
                dependencies.include project(":$it.name")
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }

            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            artifact javadocJar

            pom {
                addPomMetadataInformation(project, pom)
            }

            pom.withXml {
                def depsNode = asNode().appendNode('dependencies')
                subprojects.each {
                    def depNode = depsNode.appendNode('dependency')
                    depNode.appendNode('groupId', it.group)
                    depNode.appendNode('artifactId', it.name)
                    depNode.appendNode('version', it.version)
                    depNode.appendNode('scope', 'compile')
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri 'https://s01.oss.sonatype.org/service/local/')
            snapshotRepositoryUrl.set(uri'https://s01.oss.sonatype.org/content/repositories/snapshots/')
            username = ossrhUsername
            password = ossrhPassword
        }
    }
}
