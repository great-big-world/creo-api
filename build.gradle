plugins {
    id 'java'
    id "java-library"
    id 'idea'
    id 'fabric-loom' version '1.4-SNAPSHOT'
    id 'maven-publish'
    id 'signing'
}

version = mod_version + "+" + minecraft_version
group = maven_group

dependencies {
    afterEvaluate {
        subprojects.each {
            if (it.name.startsWith("creo")) {
                dependencies.implementation project(path: ":${it.name}", configuration: "dev")
                dependencies.include project(":${it.name}")
            }
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "fabric-loom"
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    it.version = it.mod_version + "+" + minecraft_version
    it.group = maven_group

    repositories {
        mavenCentral()
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
        withSourcesJar()
        withJavadocJar()
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release.set(17)
        it.options.encoding = "UTF-8"
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"
        modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"
    }

    Project sub = it
    tasks.withType(ProcessResources).configureEach {
        inputs.property "version", sub.version
        inputs.property "loader_version", rootProject.loader_version
        inputs.property "minecraft_version", rootProject.minecraft_version

        filesMatching("fabric.mod.json") {
            expand "version": sub.version,
                    "loader_version": rootProject.loader_version,
                    "minecraft_version": rootProject.minecraft_version
        }
    }

    configurations {
        dev
    }

    artifacts {
        dev jar
        dev sourcesJar
        dev javadocJar
    }
}

subprojects {
    it.group = project.maven_group
    it.version = it.mod_version + "+" + minecraft_version
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = archives_base_name
                version = mod_version
                url = 'https://www.creoii.dev/projects/creo-api'
                description = 'A multi-purpose api for Minecraft mod and datapack development.'
                licenses {
                    license {
                        name = 'All Rights Reserved'
                        url = 'https://github.com/great-big-world/creo-api/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'creoii'
                        name = 'creoii'
                        url = 'https://creoii.dev/'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/great-big-world/creo-api.git'
                    developerConnection = 'scm:git:https://github.com/great-big-world/creo-api.git'
                    url = 'https://github.com/great-big-world/creo-api/'
                }
                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/great-big-world/creo-api/issues'
                }
            }

            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(javadocJar) {
                builtBy javadocJar
            }
            artifact(remapSourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }
}

jar {
    destinationDirectory = file("$rootDir/build/libs/$minecraft_version/$mod_version")
}

javadocJar {
    destinationDirectory = file("$rootDir/build/libs/$minecraft_version/$mod_version")
}

sourcesJar {
    destinationDirectory = file("$rootDir/build/libs/$minecraft_version/$mod_version")
}

signing {
    if (project.hasProperty("signing.keyId")) {
        sign configurations.dev
        sign publishing.publications.mavenJava
    }
}
